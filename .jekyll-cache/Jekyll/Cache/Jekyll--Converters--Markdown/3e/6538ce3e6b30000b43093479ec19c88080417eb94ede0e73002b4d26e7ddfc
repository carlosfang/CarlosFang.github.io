I"c<h1 id="1-设置用户id和设置id">1. 设置用户ID和设置ID</h1>

<p>(1)实际用户ID、实际组ID：  标识我们究竟是谁。这两个字段在登录时取自口令文件中的登录项。通常在一个登录会话间这些值并不改变，但是超级用户进程有方法改变它们。</p>

<p>(2)有效用户ID、有效组ID： 决定了我们的文件访问权限。</p>

<p>(3)保存的设置组ID、保存的设置组ID:在执行一个程序时包含了有效用户ID和有效组ID的副本。</p>

<p>通常，有效用户ID等于实际用户ID，有效级ID等于实际组ID。
当执行一个程序文件时，进程的有效用户ID通常就是实际用户ID，有效组ID通常是实际组ID。但是可以在文件模式字（st_mode）中设置一个特殊标志，其含义是“当执行此文件时将进程的有效用户ID设置为文件所有者的用户ID（st_uid）”。</p>

<p>与此相类似，在文件模式字中可以调协另一位，它使用将此文件的进程的有效组ID设置为文件的组所有者ID（st_gid）。在文件模式籽中的这两位被称为设置用户ID（set-user-ID）位和设置组ID（set-group-ID）位。</p>

<h1 id="2-access-函数">2. access 函数</h1>

<p>access 函数是按实际用户ID和实际组IDeas进行访问权限测试的。</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#inlude &lt;unistd.h&gt;
</span><span class="kt">int</span> <span class="nf">access</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">pathname</span><span class="p">,</span> <span class="kt">int</span> <span class="n">mode</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>R_OK  测试读权限</li>
  <li>W_OK  测试写权限</li>
  <li>X_OK  测试执行权限</li>
  <li>F_OK  测试文件是否存在</li>
</ul>

<h1 id="3-umask-函数">3. umask 函数</h1>

<p>umask函数为进程设置文件模式创建屏蔽字，并返回以前的值。</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span><span class="cpf">&lt;sys/stat.h&gt;</span><span class="cp">
</span><span class="n">mode_t</span> <span class="nf">umask</span><span class="p">(</span><span class="n">mode_t</span> <span class="n">cmask</span><span class="p">);</span>
</code></pre></div></div>

<h1 id="4-chmod和fchmod函数">4. chmod和fchmod函数</h1>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;sys/stat.h&gt;</span><span class="cp">
</span><span class="kt">int</span> <span class="nf">chmod</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">pathname</span> <span class="p">,</span> <span class="n">mode_t</span> <span class="n">mode</span><span class="p">);</span>
<span class="kt">int</span> <span class="nf">fchmod</span><span class="p">(</span><span class="kt">int</span> <span class="n">filedes</span><span class="p">,</span> <span class="n">mode_t</span> <span class="n">mode</span><span class="p">);</span>
</code></pre></div></div>

<p>chmod 函数在指定的文件上进行操作，而fchmod函数则对已打开的文件进行操作。</p>

:ET