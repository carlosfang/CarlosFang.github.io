I"*<<h1 id="一-什么是-xsi-ipc">一 什么是 XSI IPC</h1>

<p>XSI IPC (X/Open System Interface Interprocess Communication) 是一组进程间通信的API标准，由 X/Open 组织定义并提供。XSI IPC 包括三种进程间通信方式：<strong>共享内存</strong>、<strong>消息队列</strong>和<strong>信号量</strong>。这三种通信方式都具有跨平台和可移植性的特点，能够在多种操作系统和硬件平台上使用。</p>
<h1 id="二-标识符和键">二 标识符和键</h1>

<p>每个内核中的 IPC 结构（消息队列、信号量或共享内存）都用一个非负整数的标识符加以引用。无论何时创建 IPC 结构（调用 msgget、semget 或shmget）,都应指定一个关键字（key），关键字的数据类型由系统规定为 key_t，通常在头文件<code class="language-plaintext highlighter-rouge">&lt;sys/types.h&gt;</code>中被规定为长整型。关键字由内核变换成标识符。</p>

<p>key的取法有两种：ftok 和 IPC_PRIVATE。</p>

<h1 id="三-两个进程服务和客户使用同一个-ipc-结构的方法">三 两个进程（服务和客户）使用同一个 IPC 结构的方法</h1>

<p>1、服务器进程可以指定键 IPC_PRIVATE 创建一个新的 IPC 结构，将返回的标识符存放在某处（如一个文件）以便和客户进程取用。也可用父子进程的方式传递。</p>

<p>2、在一个公用头文件 中定义 一个客户进程和服务器进程都认可的键。然后服务器进程指定此键创建一个新的 IPC 结构。</p>

<p>3、客户进程和服务器进程认同一个路径和项目ID（项目ID是０～２５５间的字符值），接着调用函数 <code class="language-plaintext highlighter-rouge">ftok</code> 将这两个值变换一个键。然后使用此键。</p>

<p><code class="language-plaintext highlighter-rouge">ftok</code> 函数的用法:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">key_t</span> <span class="nf">ftok</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">pathname</span><span class="p">,</span> <span class="kt">int</span> <span class="n">proj_id</span><span class="p">);</span>
</code></pre></div></div>

<p>根据文件路径名和项目ID生成一个唯一的IPC键。它通常用于创建System V IPC机制中的消息队列、共享内存和信号量等对象。</p>

<p>函数参数说明：</p>

<ul>
  <li>
    <p>pathname：文件路径名，用于生成IPC键的基础信息。如果不想使用任何文件来生成IPC键，可以将该参数设置为任意非空字符串，通常选择使用当前程序的路径。</p>
  </li>
  <li>
    <p>proj_id：项目ID，是一个整数值，用于区分同一文件不同IPC对象之间的区别。</p>
  </li>
</ul>

<p>返回值说明：</p>

<p>ftok函数返回一个唯一的IPC键。如果出现错误，将返回-1。</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;sys/ipc.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;sys/msg.h&gt;</span><span class="cp">
</span>
<span class="cp">#define MSGKEY_PATH "/tmp/msgkey_path"
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">key_t</span> <span class="n">msgkey</span> <span class="o">=</span> <span class="n">ftok</span><span class="p">(</span><span class="n">MSGKEY_PATH</span><span class="p">,</span> <span class="sc">'m'</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">msgid</span> <span class="o">=</span> <span class="n">msgget</span><span class="p">(</span><span class="n">msgkey</span><span class="p">,</span> <span class="mo">0666</span> <span class="o">|</span> <span class="n">IPC_CREAT</span><span class="p">);</span>
    <span class="c1">// 进行消息队列的操作...</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">ftok</code> 函数生成唯一的 IPC 键msgkey，并通过该键创建了一个消息队列 msgget。该 IPC 键由 MSGKEY_PATH 和 ‘m’ 共同生成，用于区分不同的 IPC 对象。</p>

<h1 id="四-权限结构">四 权限结构</h1>

<p><code class="language-plaintext highlighter-rouge">XSI IPC</code> 为每一个 IPC 结构设置了一个 <code class="language-plaintext highlighter-rouge">ipc_perm</code> 结构。该结构规定了许可权和所有者。主要成员有：</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">ipc_perm</span> <span class="p">{</span>
    <span class="n">key_t</span> <span class="n">key</span><span class="p">;</span>          <span class="cm">/* 键值 */</span>
    <span class="n">uid_t</span> <span class="n">uid</span><span class="p">;</span>          <span class="cm">/* 所有者的用户ID */</span>
    <span class="n">gid_t</span> <span class="n">gid</span><span class="p">;</span>          <span class="cm">/* 所有者的组ID */</span>
    <span class="n">uid_t</span> <span class="n">cuid</span><span class="p">;</span>         <span class="cm">/* 创建者的用户ID */</span>
    <span class="n">gid_t</span> <span class="n">cgid</span><span class="p">;</span>         <span class="cm">/* 创建者的组ID */</span>
    <span class="n">mode_t</span> <span class="n">mode</span><span class="p">;</span>        <span class="cm">/* 访问权限 */</span>
    <span class="kt">unsigned</span> <span class="kt">short</span> <span class="n">seq</span><span class="p">;</span> <span class="cm">/* 序列号 */</span>
<span class="p">};</span>

</code></pre></div></div>
<p>详细的见<code class="language-plaintext highlighter-rouge">&lt;sys/ipc.h&gt;</code>在 linux 的源码中可以找到。</p>

<p>在创建IPC结构时，对所有字段都赋初值。以后，可以调用 msgctl、semctl 或 shmctl 修改 uid、gid 和 mode 字段。为了改变这些值，调用进程必须是IPC结构的创建者或超级用户。</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;sys/ipc.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;sys/sem.h&gt;</span><span class="cp">
</span>
<span class="cp">#define SEMKEY_PATH "/tmp/semkey_path"
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// 生成唯一IPC键</span>
    <span class="n">key_t</span> <span class="n">semkey</span> <span class="o">=</span> <span class="n">ftok</span><span class="p">(</span><span class="n">SEMKEY_PATH</span><span class="p">,</span> <span class="sc">'s'</span><span class="p">);</span>
    <span class="c1">// 创建IPC信号量，设置ipc_perm结构</span>
    <span class="kt">int</span> <span class="n">semid</span> <span class="o">=</span> <span class="n">semget</span><span class="p">(</span><span class="n">semkey</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mo">0666</span> <span class="o">|</span> <span class="n">IPC_CREAT</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">semid</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">perror</span><span class="p">(</span><span class="s">"semget error"</span><span class="p">);</span>
        <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// 获取ipc_perm结构</span>
    <span class="k">struct</span> <span class="nc">semid_ds</span> <span class="n">sem_ds</span><span class="p">;</span>
    <span class="n">semctl</span><span class="p">(</span><span class="n">semid</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">IPC_STAT</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sem_ds</span><span class="p">);</span>

    <span class="c1">// 设置ipc_perm结构</span>
    <span class="n">sem_ds</span><span class="p">.</span><span class="n">sem_perm</span><span class="p">.</span><span class="n">uid</span> <span class="o">=</span> <span class="n">getuid</span><span class="p">();</span>
    <span class="n">sem_ds</span><span class="p">.</span><span class="n">sem_perm</span><span class="p">.</span><span class="n">gid</span> <span class="o">=</span> <span class="n">getgid</span><span class="p">();</span>
    <span class="n">sem_ds</span><span class="p">.</span><span class="n">sem_perm</span><span class="p">.</span><span class="n">mode</span> <span class="o">=</span> <span class="mo">0600</span><span class="p">;</span>

    <span class="c1">// 更新ipc_perm结构</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">semctl</span><span class="p">(</span><span class="n">semid</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">IPC_SET</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sem_ds</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">perror</span><span class="p">(</span><span class="s">"semctl error"</span><span class="p">);</span>
        <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="n">printf</span><span class="p">(</span><span class="s">"Semaphore created successfully.</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">ipc_perm</code> 结构和 <code class="language-plaintext highlighter-rouge">struct ipc_perm</code> 结构是同一个数据类型的别名。<code class="language-plaintext highlighter-rouge">ipc_perm</code> 是<code class="language-plaintext highlighter-rouge">&lt;sys/ipc.h&gt;</code>头文件中定义的一个宏，它被定义为 <code class="language-plaintext highlighter-rouge">struct ipc_perm</code> 类型。这样定义的好处是可以简化代码的书写，同时也能使代码更加易读。</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;sys/ipc.h&gt;</span><span class="cp">
</span>
<span class="n">key_t</span> <span class="n">key</span> <span class="o">=</span> <span class="n">ftok</span><span class="p">(</span><span class="s">"/tmp/semkey_path"</span><span class="p">,</span> <span class="sc">'s'</span><span class="p">);</span>
<span class="kt">int</span> <span class="n">semid</span> <span class="o">=</span> <span class="n">semget</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mo">0666</span> <span class="o">|</span> <span class="n">IPC_CREAT</span><span class="p">);</span>
<span class="k">struct</span> <span class="nc">ipc_perm</span> <span class="n">perm</span> <span class="o">=</span> <span class="p">{</span> <span class="n">getuid</span><span class="p">(),</span> <span class="n">getgid</span><span class="p">(),</span> <span class="mo">0600</span><span class="p">,</span> <span class="mi">0</span> <span class="p">};</span>
<span class="n">semctl</span><span class="p">(</span><span class="n">semid</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">IPC_SET</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">perm</span><span class="p">);</span>
</code></pre></div></div>
<p>声明了一个ipc_perm类型的变量perm，并将其成员初始化为进程的用户ID、组ID以及访问权限。在调用semctl函数时，我们将该结构作为参数传递给函数，以设置IPC信号量的权限和所有权。</p>
<h1 id="五-linux中与ipc相关的命令包括ipcsipcrm释放ipc">五 Linux中，与IPC相关的命令包括：ipcs、ipcrm（释放IPC）</h1>

<p>IPCS 命令是 Linux 下显示进程间通信设施状态的工具。我们知道，系统进行进程间通信（IPC）的时候，可用的方式包括信号量、共享内存、消息队列、管道、信号（signal）、套接字等形式。使用IPCS可以查看共享内存、信号量、消息队列的状态。</p>

<p>例如在 CentOS6.0 上执行 ipcs</p>

<p>具体的用法总结如下：</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#1、显示所有的IPC设施</span>
 ipcs <span class="nt">-a</span>
<span class="c">#2、显示所有的消息队列Message Queue</span>
 ipcs <span class="nt">-q</span>
<span class="c">#3、显示所有的信号量</span>
 ipcs <span class="nt">-s</span>
<span class="c">#4、显示所有的共享内存</span>
 ipcs <span class="nt">-m</span>
<span class="c">#5、显示IPC设施的详细信息</span>
 ipcs <span class="nt">-q</span> <span class="nt">-i</span> <span class="nb">id</span>
<span class="c">#id 对应shmid、semid、msgid等。-q对应设施的类型（队列），查看信号量详细情况使用-s，查看共享内存使用-m。</span>
<span class="c">#6、显示IPC设施的限制大小</span>
 ipcs <span class="nt">-m</span> <span class="nt">-l</span>
<span class="c">#-m对应设施类型，可选参数包括-q、-m、-s。</span>
<span class="c">#7、显示IPC设施的权限关系</span>
 ipcs <span class="nt">-c</span>
 ipcs <span class="nt">-m</span> <span class="nt">-c</span>
 ipcs <span class="nt">-q</span> <span class="nt">-c</span>
 ipcs <span class="nt">-s</span> <span class="nt">-c</span>
<span class="c">#8、显示最近访问过IPC设施的进程ID。</span>
 ipcs <span class="nt">-p</span>
 ipcs <span class="nt">-m</span> <span class="nt">-p</span>
 ipcs <span class="nt">-q</span> <span class="nt">-p</span>
<span class="c">#9、显示IPC设施的最后操作时间</span>
 ipcs <span class="nt">-t</span>
 ipcs <span class="nt">-q</span> <span class="nt">-t</span>
 ipcs <span class="nt">-m</span> <span class="nt">-t</span>
 ipcs <span class="nt">-s</span> <span class="nt">-t</span>
<span class="c">#10、显示IPC设施的当前状态</span>
 ipcs <span class="nt">-u</span>
</code></pre></div></div>
<p>Linux上的ipcs命令，不支持 UNIX 上的 -b、-o 指令，同样 UNIX 中不支持 -l、-u 指令，所以在编写跨平台的脚本时，需要注意这个问题。</p>
:ET