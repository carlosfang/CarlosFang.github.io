I"a
<p>Channel 主要是负责对I/O事件的分发。 一个Channel对象对应一个fd。</p>

<p>对Channle的误解可能是一开始时就想成了管道，渠道带缓存之类的。但其实和这个一点毛关系也没有。</p>

<p>Channel 的 核心如下：</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">EventLoop</span><span class="o">*</span> <span class="n">loop_</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">fd_</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">events_</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">revents_</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">index_</span><span class="p">;</span>

<span class="n">ReadEventCallback</span> <span class="n">readCallback_</span><span class="p">;</span>
<span class="n">EventCallback</span> <span class="n">writeCallback_</span><span class="p">;</span>
<span class="n">EventCallback</span> <span class="n">errorCallback_</span><span class="p">;</span>
<span class="n">EventCallback</span> <span class="n">closeCallback_</span><span class="p">;</span>
</code></pre></div></div>

<p>EventCallback 会在handleEvent这个成员函数中根据不同的事件被调用。</p>

<p>index_ 比较不好理解一点，在Poll和Epoll两个方式下index_的意义还不一样。</p>
<ul>
  <li>在PollPoller类中pollfds_数组的下标。</li>
  <li>在EPollPoller类中 可三种不同的状态 kNew  kAdded kDeleted。</li>
</ul>

<p>在events_和revents_明显对应了struct pollfd结构中的成员。其实poll和 epoll的事件编号应该一样的。muduo 在EPollPoller中
做了检测：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>BOOST_STATIC_ASSERT(EPOLLIN == POLLIN);
BOOST_STATIC_ASSERT(EPOLLPRI == POLLPRI);
BOOST_STATIC_ASSERT(EPOLLOUT == POLLOUT);
BOOST_STATIC_ASSERT(EPOLLRDHUP == POLLRDHUP);
BOOST_STATIC_ASSERT(EPOLLERR == POLLERR);
BOOST_STATIC_ASSERT(EPOLLHUP == POLLHUP);

</code></pre></div></div>

<p>需要注意的是，Channel并不拥有该fd,它不会在析构函数中去关闭这个fd（fd是由Socket类的析构函数中关闭，即RAII的方法），Channel的生命周期由其owner负责。
fd 在对象初始化时给出。但在析构时并不去关闭它，而是由owner自己负责。</p>

<p><strong>后续要再看看加强理解</strong></p>

<hr />
<p>-– 《Linux多线程服务端编程：使用muduo C++ 网络库》 陈硕. 电子工业出版社. Kindle 版本.</p>

:ET