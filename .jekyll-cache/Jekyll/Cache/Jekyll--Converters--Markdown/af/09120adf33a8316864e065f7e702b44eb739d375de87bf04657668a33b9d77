I"E<p>Acceptor  class 是一个链接接收管理器。是一个内部使用类，供TcpServer  使用。</p>

<p>比较简单。</p>

<p>Acceptor的数据成员包括Socket、Channel等。 其中Socket是 一个RAIIhandle， 封装了socket文件描述符的生命期。</p>

<p>Acceptor的socket是listening socket， 即 server socket。 Channel用于观察此socket上的readable事件， 并回调 Acceptor::handleRead()，后者会调用 accept(2) 来接受新连接，并回调用户callback。</p>

<p>在构造时，acceptChannel_(loop, acceptSocket_.fd()),
把 fd和loop通过Channel 绑定了。 
所以， 当有链接过来时，就可以处理事件了。事件的回调如下：</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 设置新连接的回调函数，很重要一个接口</span>
  <span class="kt">void</span> <span class="nf">setNewConnectionCallback</span><span class="p">(</span><span class="k">const</span> <span class="n">NewConnectionCallback</span><span class="o">&amp;</span> <span class="n">cb</span><span class="p">)</span>
  <span class="p">{</span> <span class="n">newConnectionCallback_</span> <span class="o">=</span> <span class="n">cb</span><span class="p">;</span> <span class="p">}</span> 
</code></pre></div></div>

<p>有一个处理很好的地方是 当链接达到最大数时的处理方式：</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">LOG_SYSERR</span> <span class="o">&lt;&lt;</span> <span class="s">"in Acceptor::handleRead"</span><span class="p">;</span>
    <span class="c1">// Read the section named "The special problem of</span>
    <span class="c1">// accept()ing when you can't" in libev's doc.</span>
    <span class="c1">// By Marc Lehmann, author of libev.</span>

    <span class="c1">// 这样做，只是为了优雅的断开客户端。但服务端的fd耗尽时，客户端的链接还是在的。</span>
    <span class="c1">//</span>
    <span class="c1">// 准备一个空闲的文件描述符。遇到这种情况，先关闭这个空闲文件，获得一个文件描述符的名额；</span>
    <span class="c1">// 再accept(2)拿到新socket连接的描述符；随后立刻close(2)它，这样就优雅地断开了客户端连接；</span>
    <span class="c1">// 最后重新打开一个空闲文件，把“坑”占住，以备再次出现这种情况时使用。</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">errno</span> <span class="o">==</span> <span class="n">EMFILE</span><span class="p">)</span>  <span class="c1">// EMFILE</span>
    <span class="p">{</span>
      <span class="o">::</span><span class="n">close</span><span class="p">(</span><span class="n">idleFd_</span><span class="p">);</span>
      <span class="n">idleFd_</span> <span class="o">=</span> <span class="o">::</span><span class="n">accept</span><span class="p">(</span><span class="n">acceptSocket_</span><span class="p">.</span><span class="n">fd</span><span class="p">(),</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
      <span class="o">::</span><span class="n">close</span><span class="p">(</span><span class="n">idleFd_</span><span class="p">);</span>
      <span class="n">idleFd_</span> <span class="o">=</span> <span class="o">::</span><span class="n">open</span><span class="p">(</span><span class="s">"/dev/null"</span><span class="p">,</span> <span class="n">O_RDONLY</span> <span class="o">|</span> <span class="n">O_CLOEXEC</span><span class="p">);</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>对于Socket的封装后面再写了。</p>

<hr />
<p>-– 《Linux多线程服务端编程：使用muduo C++ 网络库》 陈硕. 电子工业出版社. Kindle 版本.</p>

:ET