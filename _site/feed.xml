<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>xyecho - just my notes</title>
    <description>读书，生活，技术</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 24 Feb 2023 12:56:32 +0800</pubDate>
    <lastBuildDate>Fri, 24 Feb 2023 12:56:32 +0800</lastBuildDate>
    <generator>Jekyll v4.2.2</generator>
    
      <item>
        <title>chatGPT 注册方法</title>
        <description>&lt;p&gt;之前用的是别人的代理的服务。 想想还是自己搞一个比较好。 现在网上 chatGPT 注册的方式资料很多。自己也照别人的试了一下。&lt;/p&gt;

&lt;p&gt;注册所需要的准备东西：&lt;/p&gt;

&lt;p&gt;1、可以科学上网，因为 chatGPT 在中国大陆和中国香港都是不可用的。所以需要切换到其他国家的IP。&lt;/p&gt;

&lt;p&gt;2、一个有效的邮件，我用的是 google 的 mail。&lt;/p&gt;

&lt;p&gt;3、一个可以接收验证码的手机号。国内的手机号不能用。可以通过注册国外的虚拟电话来完成这一步。&lt;/p&gt;

&lt;h1 id=&quot;科学上网&quot;&gt;科学上网&lt;/h1&gt;

&lt;p&gt;关于科学上网这个一步略过了，我自己是购买了相关的服务了, 要注意的要开启全局模式。&lt;/p&gt;

&lt;h1 id=&quot;注册-openai&quot;&gt;注册 openAI&lt;/h1&gt;

&lt;p&gt;网址：&lt;a href=&quot;https://chat.openai.com/auth/login&quot;&gt;https://chat.openai.com/auth/login&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;进去之后，左右两边是登录和注册。 如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/chatGPT/chatGPT-signup-2023-02-20-18-40-44.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;进入之后，填写自己的邮箱。在邮箱中激活自己的帐号。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/chatGPT/chatGPT-signup-2023-02-20-18-48-50.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过自己邮箱激活帐号之后，会要求你输入手机号。这里就需要你的国外的虚拟手机号了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/chatGPT/chatGPT-signup-2023-02-20-18-55-06.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;虚拟手机号&quot;&gt;虚拟手机号&lt;/h1&gt;

&lt;p&gt;虚拟手机号网上推荐的是通过 sms-activate 注册一个临时的手机号。  &lt;a href=&quot;https://sms-activate.org/cn&quot;&gt;https://sms-activate.org/cn&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在 sms-activate上 可以买其他的国家的临时手机号。 不是很贵，都在1美元以下。可以玩充值1美元。充值可以选择支付宝或微信。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/chatGPT/chatGPT-signup-2023-02-20-16-16-30.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/chatGPT/chatGPT-2023-02-20-19-09-41.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后，在搜索框搜索 openAI，选择地区虚拟手机号，购买后就会一个虚拟手机号。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/chatGPT/chatGPT-signup-2023-02-20-19-09-41.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;把手机号写入面的 chatGPT 的页面。注意要选对国家。&lt;/p&gt;

&lt;p&gt;发送验证码之后，在 sms-activate 可以收到验证码。如图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/chatGPT/chatGPT-signup-2023-02-20-16-10-17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这是一个临时手机号，有效时长20分钟。&lt;/p&gt;

&lt;p&gt;20分钟内如果没有收到验证码，可以点右侧的叉号，退订，费用还会返还。可重新选择其他国家的手机号。&lt;/p&gt;

&lt;h1 id=&quot;chatgpt&quot;&gt;chatGPT&lt;/h1&gt;

&lt;p&gt;回到 chatGPT 页面完成所有流程。 就可以在下面的输入框聊天了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/chatGPT/chatGPT-signup-2023-02-20-19-16-24.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/chatGPT/chatGPT-signup-2023-02-20-19-54-17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/chatGPT/chatGPT-signup-2023-02-20-20-04-21.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;体验&quot;&gt;体验&lt;/h1&gt;

&lt;p&gt;第一感觉不是很酷的，理解语言和回复都有很好的体验。对中文的理解也准确。回复的内容质量也很高。&lt;/p&gt;

&lt;p&gt;估计以后很多文字工作者可能真的被替代掉了。&lt;/p&gt;

&lt;p&gt;码农可能也要失业了。&lt;/p&gt;

&lt;p&gt;不好的地方：&lt;/p&gt;

&lt;p&gt;1、回复比较慢。有时候要等上10秒左右。也可能和科学上网有关，也可能它真的需要埋单。&lt;/p&gt;

&lt;p&gt;2、我输入错误的中文，它直接返回了错误。 经常出现请求失败的情况。 如：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/chatGPT/chatGPT-signup-2023-02-20_20-11-06.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3、估计是服务负载过高了。如：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/chatGPT/chatGPT-signup-2023-02-21-16-36-37.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4、这两直接把普通用户给停了。太火爆了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/chatGPT/chatGPT-2023-02-23-08-55-02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 19 Feb 2023 18:12:15 +0800</pubDate>
        <link>http://localhost:4000/chatGPT-signup</link>
        <guid isPermaLink="true">http://localhost:4000/chatGPT-signup</guid>
        
        <category>chatGPT</category>
        
        <category>人工智能</category>
        
        
        <category>学习备忘</category>
        
      </item>
    
      <item>
        <title>jekyll blog 的 tags categories 跳转失败</title>
        <description>&lt;p&gt;博客的 tags 和 categories 跳转全部失败了。有点奇怪，之前没有发现这个有什么问题，估计改动了其他的什么功能导致了这个问题吧。&lt;/p&gt;

&lt;h1 id=&quot;问题描述&quot;&gt;问题描述&lt;/h1&gt;

&lt;p&gt;点击文章中的 category 和 tag 都无法正常跳转，出现如下图情况。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/tools/jeklly-2023-02-18-12-17-17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;出的错误：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/tools/jeklly-2023-02-18-11-58-25.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;解决&quot;&gt;解决&lt;/h1&gt;

&lt;p&gt;感觉是拼接的 url 出现了问题。记得之前在URL后加了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt; 导致无法正常显示出来。 估计也是这个问题，&lt;/p&gt;

&lt;p&gt;把 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://blog.xyecho.com/categories/#c++-ref&lt;/code&gt;  改成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://blog.xyecho.com/categories#c++-ref&lt;/code&gt; 也可以正常显示了。&lt;/p&gt;

&lt;p&gt;但在本地却没有发现这个问题，应该是本地服务对 URL 没有做严格的匹配吧。&lt;/p&gt;

&lt;p&gt;代码发动如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/tools/jeklly-2023-02-18-12-47-48.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 17 Feb 2023 18:12:15 +0800</pubDate>
        <link>http://localhost:4000/jekyll-blog-tags-categories-failed</link>
        <guid isPermaLink="true">http://localhost:4000/jekyll-blog-tags-categories-failed</guid>
        
        <category>bug</category>
        
        <category>工作提效</category>
        
        
        <category>tools</category>
        
      </item>
    
      <item>
        <title>软件工程文化的思考</title>
        <description>&lt;p&gt;1、编程是指写代码的直接行为。&lt;/p&gt;

&lt;p&gt;2、软件工程用构建和维护代码的工具和流程， 保持代码的长期价值。因为涉及到流程，所以软件工程更多的团队行为。&lt;/p&gt;

&lt;p&gt;3、软件工程的最佳实践： 可持续、规模化。&lt;/p&gt;

&lt;p&gt;4、团队的协作，沟通是手段，业务产出才是目的。&lt;/p&gt;

&lt;p&gt;5、协同和评审是依赖团队保证自己在正确路上。&lt;/p&gt;

&lt;p&gt;6、团队可以让我们获得集体智慧。&lt;/p&gt;

&lt;p&gt;7、团队应该有一个安全环境或容错空间，让新人有信心提出问题。&lt;/p&gt;

&lt;p&gt;8、沟通时，要分清对方是意图、事实、情绪，还是期待。&lt;/p&gt;

&lt;p&gt;9、导师的三个能力： 一、熟悉团队流程和系统的经验； 二、向其他人解释事情的能力； 三、评估对方需要多少帮助的能力，主动询问帮助，不要过度唠叨。&lt;/p&gt;
</description>
        <pubDate>Sun, 12 Feb 2023 18:12:15 +0800</pubDate>
        <link>http://localhost:4000/think-about-software-engineering</link>
        <guid isPermaLink="true">http://localhost:4000/think-about-software-engineering</guid>
        
        <category>工作经验</category>
        
        <category>团队管理</category>
        
        
        <category>总结</category>
        
      </item>
    
      <item>
        <title>复盘文档的要素</title>
        <description>&lt;p&gt;&lt;strong&gt;复盘文档应该包括以下要素&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;1、事件的摘要。简短说明情况，什么时间什么业务什么原因出现什么情况，目前是什么状况。&lt;/p&gt;

&lt;p&gt;2、具体事件。整个事件时间线，问题出现、问题发现、问题调查、问题解决。以时间线详细说明。&lt;/p&gt;

&lt;p&gt;3、致该事件的主要原因，影响程度。&lt;/p&gt;

&lt;p&gt;4、为什么没有及时发现，是否有系统演习，为什么没有覆盖到。&lt;/p&gt;

&lt;p&gt;5、可立即修复问题的具体措施，防止事件再次发生的具体措施，经验教训。&lt;/p&gt;

</description>
        <pubDate>Fri, 10 Feb 2023 18:12:15 +0800</pubDate>
        <link>http://localhost:4000/review-the-main-elements-of-document</link>
        <guid isPermaLink="true">http://localhost:4000/review-the-main-elements-of-document</guid>
        
        <category>工作经验</category>
        
        <category>团队管理</category>
        
        
        <category>总结</category>
        
      </item>
    
      <item>
        <title>说话的方式</title>
        <description>&lt;p&gt;汇报或者表达时要按以下主要步骤:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;结论 –&amp;gt; 原因 –&amp;gt; 措施 –&amp;gt;建议&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1、先把结论简单说一下&lt;/p&gt;

&lt;p&gt;2、然后解释原因&lt;/p&gt;

&lt;p&gt;3、并给出措施和建议。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;节奏:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;把握好沟通的节奏，如果没有办法把握整体的节奏，则把握好自己的节奏。&lt;/p&gt;

&lt;p&gt;好好倾听，别人不对，也要好好倾听，不要随便打断别人节奏。&lt;/p&gt;

&lt;p&gt;如果被别人打断了， 就停下来，让他先说，他说完之后，再按自己的节奏说。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;如何很好的回答别人的提问？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果自己的观点已经不在对方的眼界认识之内，停止阐明观点。怎么说也没有用。&lt;/p&gt;

&lt;p&gt;如果对方的观点，难以理解，可能已经不在眼界认识之内，不要急于否定，反驳。好好听，好好记。&lt;/p&gt;
</description>
        <pubDate>Tue, 10 Jan 2023 18:12:15 +0800</pubDate>
        <link>http://localhost:4000/the-way-you-say</link>
        <guid isPermaLink="true">http://localhost:4000/the-way-you-say</guid>
        
        <category>工作经验</category>
        
        <category>团队管理</category>
        
        
        <category>总结</category>
        
      </item>
    
      <item>
        <title>沟通原则</title>
        <description>&lt;p&gt;1、耐心听别人把话说完。&lt;/p&gt;

&lt;p&gt;2、不预设立场，明确搞明白对方的立场和表达的结论。&lt;/p&gt;

&lt;p&gt;3、解决问题，要站在对方的立场上考虑问题，同时一定要对方感觉到这一点。&lt;/p&gt;

&lt;p&gt;4、不要试图去证明对方是错的。&lt;/p&gt;

&lt;p&gt;5、用“我可能没有表达清楚” 而不是 “你不懂”。&lt;/p&gt;

&lt;p&gt;6、多说对方爱听的话，如夸奖、鼓励，对方的兴趣，要真诚。&lt;/p&gt;

&lt;p&gt;7、清晰，准确的表达自己的意图，观点。&lt;/p&gt;

&lt;p&gt;8、沟通完成后，做备忘录，双方确认。&lt;/p&gt;

&lt;p&gt;9、多做预案、多做练习。&lt;/p&gt;

&lt;p&gt;10、 沟通中有任何问题，事后都要做及时复盘。&lt;/p&gt;

&lt;p&gt;11、事情总有意外发生，事后复盘即可，不必太在意了。&lt;/p&gt;

&lt;p&gt;12、共赢、合作是都是最优化方案，不占尽别人的所有，留有余地。&lt;/p&gt;

&lt;p&gt;13、沟通是解决问题，不是制造问题。&lt;/p&gt;

&lt;p&gt;14、先解决情绪，再解决问题。&lt;/p&gt;

&lt;p&gt;15、重要的事情，晚点回复。回复要正式，先过脑子，打草稿，检查有没有错别字。&lt;/p&gt;

&lt;p&gt;16、紧急事件：语音，电话，非紧急事件，微信留言； 复杂事件：发邮件，然后微信或电话提醒。&lt;/p&gt;

&lt;p&gt;17、说错话、做错事，要马上道歉。&lt;/p&gt;

</description>
        <pubDate>Mon, 09 Jan 2023 18:12:15 +0800</pubDate>
        <link>http://localhost:4000/principles-of-communication</link>
        <guid isPermaLink="true">http://localhost:4000/principles-of-communication</guid>
        
        <category>工作经验</category>
        
        <category>团队管理</category>
        
        
        <category>总结</category>
        
      </item>
    
      <item>
        <title>c++11 thread 库</title>
        <description>&lt;p&gt;C++11 标准引入了对线程的支持，这些支持主要包括以下内容：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;std::thread&lt;/strong&gt; 类：C++11中引入了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::thread&lt;/code&gt; 类，它提供了一个可执行的线程对象，使得程序可以创建和管理线程。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;std::mutex&lt;/strong&gt; 类：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::mutex &lt;/code&gt;类提供了一种基本的互斥机制，允许程序员通过对共享资源的访问进行同步。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;std::condition_variable&lt;/strong&gt; 类：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::condition_variable&lt;/code&gt; 类提供了一种机制，使得线程能够等待某个条件成立，从而避免了线程轮询等待的问题。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;std::future&lt;/strong&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::promise&lt;/code&gt; 类：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::future&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::promise&lt;/code&gt; 类提供了一种异步编程的方式，允许程序员将任务提交到线程池中，并且可以得到返回值。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;std::atomic&lt;/strong&gt; 类：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::atomic &lt;/code&gt;类提供了一种基本的原子操作，用于在多线程环境下保证共享变量的原子性操作。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thread-local storage&lt;/strong&gt;：C++11 标准中引入了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thread_local&lt;/code&gt; 关键字，用于指定变量在每个线程中是唯一的。&lt;/p&gt;

&lt;h1 id=&quot;stdthread&quot;&gt;std::thread&lt;/h1&gt;

&lt;p&gt;创建两个线程，一个线程输出奇数，另一个线程输出偶数：&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;thread&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printOddNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Odd number: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printEvenNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Even number: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printOddNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printEvenNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在主函数中，我们创建了两个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; std::thread &lt;/code&gt;对象 t1 和 t2，并将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;printOddNumbers()&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;printEvenNumbers()&lt;/code&gt; 作为线程函数传递给它们。然后调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;join()&lt;/code&gt; 函数等待线程的结束。运行程序后，输出如下：&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Odd number: 1
Odd number: 3
Odd number: 5
Odd number: 7
Odd number: 9
Even number: 2
Even number: 4
Even number: 6
Even number: 8
Even number: 10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;stdthread-1&quot;&gt;std::thread&lt;/h1&gt;

&lt;p&gt;定义了一个全局变量 counter，并使用两个线程分别对其进行加和减的操作：&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;thread&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printOddNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Odd number: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printEvenNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Even number: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printOddNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printEvenNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::mutex&lt;/code&gt; 的作用是对全局变量 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;counter&lt;/code&gt; 进行互斥访问，避免了两个线程同时对其进行修改导致的数据竞争问题。其中，在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub&lt;/code&gt; 函数中，使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::mutex&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lock()&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unlock()&lt;/code&gt; 方法来对互斥量进行加锁和解锁，从而确保了两个线程之间的数据访问互斥性。&lt;/p&gt;

&lt;h1 id=&quot;stdcondition_variable&quot;&gt;std::condition_variable&lt;/h1&gt;

&lt;p&gt;用于线程间的条件变量等待和通知。它是配合 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::unique_lock&lt;/code&gt; 使用的，用于线程间共享数据的同步。&lt;/p&gt;

&lt;p&gt;下面是一个简单的示例程序，使用 std::condition_variable 实现两个线程间的同步：&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;thread&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;mutex&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;condition_variable&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mtx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condition_variable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;consumer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unique_lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mtx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Consumer: data = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;producer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this_thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chrono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;notify_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;consumer_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;consumer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;producer_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;producer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;consumer_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;producer_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;consumer()&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;producer()&lt;/code&gt; 分别运行在两个线程中。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;consumer()&lt;/code&gt; 中使用 s&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;td::unique_lock&lt;/code&gt; 对 mtx 进行加锁，并在 while 循环中等待条件变量 ready 的值为 true，以防止在数据未准备好时访问 data。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;producer()&lt;/code&gt; 中首先等待 1 秒钟以模拟数据的准备过程，然后修改 data 的值为 42，并将 ready 的值设置为 true，最后通过调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cv.notify_one()&lt;/code&gt; 通知等待中的线程可以开始访问数据了。&lt;/p&gt;

&lt;p&gt;最后在主线程中调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;join()&lt;/code&gt; 等待两个线程结束。&lt;/p&gt;

&lt;h1 id=&quot;stdfuture&quot;&gt;std::future&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::future&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::promise&lt;/code&gt; 是 C++11 中提供的用于线程间通信的工具，其中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::promise&lt;/code&gt; 是一个对象，它可以在某个线程中设置一个值，并让另一个线程等待该值的产生，而 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::future&lt;/code&gt; 则是用来获取这个值的。&lt;/p&gt;

&lt;p&gt;下面是一个简单的例子，用于演示如何使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::future&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::promise&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;future&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Value: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fut&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_future&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;th1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;th2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this_thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chrono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;prom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;th1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;th2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;创建了一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::promise&lt;/code&gt; 对象 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prom&lt;/code&gt;，并通过它获取了一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::future&lt;/code&gt; 对象 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fut&lt;/code&gt;。接着，我们创建了两个线程 th1 和 th2，其中 th1 等待 fut 的值的产生，并在产生后将其打印出来；而 th2 则会等待 2 秒钟后，将值 10 设置到 prom 中，使得 th1 可以获取这个值并打印出来。&lt;/p&gt;

&lt;p&gt;需要注意的是，在将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::promise&lt;/code&gt; 对象 prom 传递给线程 th2 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lambda&lt;/code&gt; 表达式时，我们必须使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::ref()&lt;/code&gt; 函数将其包装成一个引用，否则编译器将无法正确地处理它。&lt;/p&gt;

&lt;h1 id=&quot;stdatomic&quot;&gt;std::atomic&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::atomic&lt;/code&gt; 是 C++11 引入的一个用于原子操作的库，可以保证操作的原子性，避免多线程环境下的数据竞争。&lt;/p&gt;

&lt;p&gt;以下是一个使用 std::atomic 的简单示例，假设有两个线程同时对共享变量进行加一操作：&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;thread&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;atomic&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;atomic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 定义原子变量&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;increment_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 对原子变量进行加一操作&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;increment_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;increment_counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Counter value: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 输出共享变量的值&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;定义了一个名为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;counter&lt;/code&gt; 的原子变量，两个线程并行执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;increment_counter()&lt;/code&gt; 函数，对 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;counter&lt;/code&gt; 进行 10000 次加一操作。由于使用了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; std::atomic&lt;/code&gt;，这个操作是原子的，不会发生数据竞争，保证了线程安全。最终输出 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;counter&lt;/code&gt; 的值。&lt;/p&gt;

&lt;h1 id=&quot;thread-local-storage&quot;&gt;Thread-local storage&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Thread-local storage（TLS）&lt;/strong&gt;是指每个线程都有自己独立的存储空间，这些存储空间可以用来存储线程私有的数据，不同线程之间的数据互不干扰。TLS 是多线程编程中非常重要的一个概念，可以帮助开发者在多线程环境下更加高效地使用全局变量。&lt;/p&gt;

&lt;p&gt;C++11中引入了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thread_local&lt;/code&gt; 关键字，它可以用来修饰全局变量、静态变量和局部静态变量。使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thread_local&lt;/code&gt; 修饰的变量只有在声明它的线程中可见，其他线程无法访问到该变量，也就是说，每个线程都有自己的变量副本。&lt;/p&gt;

&lt;p&gt;以下是一个使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thread_local&lt;/code&gt; 修饰的全局变量的例子：&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;thread&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;thread_local&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Thread &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this_thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;们定义了一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thread_local&lt;/code&gt; 的全局变量x，并在 foo 函数中对其进行修改和打印。接着创建了两个线程 t1 和 t2，并分别执行 foo 函数，最后调用 join 函数等待线程执行结束。&lt;/p&gt;

&lt;p&gt;由于 x 是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thread_local&lt;/code&gt; 变量，因此在每个线程中都有自己的副本，两个线程对 x 的修改互不干扰。运行结果可能类似于：&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Thread 139861759004416: 1
Thread 139861750611712: 1

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;每个线程都有自己的x变量副本，并且只能访问到自己的副本。这样可以避免不同线程之间对同一全局变量的竞争和冲突，从而提高程序的稳定性和并发性能。&lt;/p&gt;
</description>
        <pubDate>Sat, 26 Nov 2022 00:12:15 +0800</pubDate>
        <link>http://localhost:4000/c++11-thread</link>
        <guid isPermaLink="true">http://localhost:4000/c++11-thread</guid>
        
        <category>c++</category>
        
        <category>技术笔记</category>
        
        
        <category>c++</category>
        
      </item>
    
      <item>
        <title>《现代 C++ 教程》 by 欧长坤</title>
        <description>&lt;p&gt;介绍 C++11/14/17 的一些新特性。&lt;/p&gt;

&lt;p&gt;github : &lt;a href=&quot;https://github.com/changkun/modern-cpp-tutorial&quot;&gt;modern-cpp-tutorial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;用幕布的导图做读书记录，确实很方便，书本所表达的整体结构很清楚，哪一些要重点关注。&lt;/p&gt;

&lt;p&gt;也可以用于复习，看着结构回顾知识点。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/programming-language/modern-cpp-tutorial-2022-11-24_16-29-18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 24 Nov 2022 00:12:15 +0800</pubDate>
        <link>http://localhost:4000/modern-cpp-tutorial</link>
        <guid isPermaLink="true">http://localhost:4000/modern-cpp-tutorial</guid>
        
        <category>读书</category>
        
        <category>c++</category>
        
        
        <category>c++</category>
        
      </item>
    
      <item>
        <title>How to Make Good Code Reviews Better</title>
        <description>&lt;p&gt;from ：&lt;a href=&quot;https://levelup.gitconnected.com/how-to-make-good-code-reviews-better-172c5dc01d81&quot;&gt; How to Make Good Code Reviews Better&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;好的代码 review 更应该关注程序执行时可能出现的异常，而不是只是在找代码中的Bug。代码 review 的策略应该是清晰专注的代码风格，找出可替代的方案，增强彼此的学习，分享开发者的主导权（share ownership），而不是做为一个盘查者。&lt;/p&gt;

&lt;p&gt;代码 review 的反馈是建立团队贡献的一种主要方式。通过建设一个强大的团队，将促进一个高质量的产品，一个高质量的团队和一个高质量的生活。&lt;/p&gt;

&lt;p&gt;关于代码 review 有以下几方面可以做：&lt;/p&gt;

&lt;h1 id=&quot;1设置指标并实现它&quot;&gt;1、设置指标并实现它&lt;/h1&gt;

&lt;p&gt;你收集的指标的平衡是比较关键，太多了指标浪费时间，太少指标容易迷失在代码中，开始 review 之前，团队制定好代码 review 的有效性，并明确目标。好的 代码 review 应该是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;功能优先&lt;/strong&gt;  代码应该业务需求的预期执行&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;整洁和可维护性第二&lt;/strong&gt; 代码的高可读性&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;优化第三&lt;/strong&gt; 在生产环境按预期执行。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这一些目标，要确保 review 期间和之后要有改进和跟踪。&lt;/p&gt;

&lt;p&gt;记住，目标应该展示代码改进的量化情况。“修复更多bug”并不是一个不会增加任何价值的有形目标。&lt;/p&gt;

&lt;h1 id=&quot;2批评是观点而不是人&quot;&gt;2、批评是观点而不是人&lt;/h1&gt;

&lt;p&gt;为什么代码 review 的讨论有时候会失控充满情绪化？ 当们不是在讨论事，而在讨论人的时候，事情就发生变化了。&lt;/p&gt;

&lt;p&gt;总是很容易说:“你，你真笨，代码为什么不实现并发?”&lt;/p&gt;

&lt;p&gt;而是应该优雅、镇定和成熟地说：“我对你实现这段代码的方式很好奇。这段代码如何处理并发实际上。“&lt;/p&gt;

&lt;p&gt;第一种方法中，你是在羞辱一个人，并给他进入开放式辩论的弹药。第二种方法中，我们只讨论代码。没有评判或指责，只是一个简单的澄清。&lt;/p&gt;

&lt;p&gt;和对方进行有意义的沟通，稍微的礼貌是很有帮忙的。我们确认观点的纯粹性而不应该充满仇恨的欲望和个人观点。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Keep it professional, not personal.&lt;/strong&gt;   保持职业性，而不是私人化。&lt;/p&gt;

&lt;h1 id=&quot;3问题一定要搞明白&quot;&gt;3、问题一定要搞明白&lt;/h1&gt;

&lt;p&gt;如果你不熟悉这个应用（程序），就不要去review 代码。一定要自己先熟悉产品需求。&lt;/p&gt;

&lt;p&gt;你要去查询所有你认为有关联的事件，而不用去考虑别人怎么想。要你问更深层次的问题的并确认明白解决方案的每一步。&lt;/p&gt;

&lt;p&gt;代码 review 应该遵循相同的原则下进行思考：”这个改动影响面有多大？“&lt;/p&gt;

&lt;p&gt;从更广的层面上，寻找任何重复的、非模块化或不遵守标准约定的代码。以及分析对代码架构的修改。&lt;/p&gt;

&lt;p&gt;不要接受别人告诉你的表面价值，而是不断质疑，直到你对代码的了解和开发人员的一样多。&lt;/p&gt;

&lt;h1 id=&quot;4不应该填鸭式灌输&quot;&gt;4、不应该填鸭式灌输&lt;/h1&gt;

&lt;p&gt;当你代码 review 时，你也是一个导师。一个好的导师不应该填鸭式灌输。&lt;/p&gt;

&lt;p&gt;这个观点有几个好处：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;代码 review 应该是一个学习和分享的过程。&lt;/li&gt;
  &lt;li&gt;开发人员对代码拥有完全的主导权，而不是依赖你来帮助他们解决问题。&lt;/li&gt;
  &lt;li&gt;这个过程也在培养下一批有才能的高级开发人员。&lt;/li&gt;
  &lt;li&gt;一旦整个团队都以这种学习的态度。团队的整体能力都会在上升。开发者合理的利用”自我效应“，”自我效应“会激励开发人员统写出更简洁的代码。因为这可以展示他们引以为傲的知识。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;5review-代码别超过60分钟&quot;&gt;5、review 代码别超过60分钟。&lt;/h1&gt;

&lt;p&gt;不要把代码 review 当成苦差事。如果你吸收知识的能力在每一分钟都在下降，那么你需要休息一下，重新调整你的思维，让它发挥最大的能力。&lt;/p&gt;

&lt;p&gt;最好的代码 review 应该是短时间进行。&lt;/p&gt;

&lt;p&gt;不要一次检查太多的代码行，这样不太可能发现缺陷。&lt;/p&gt;

&lt;p&gt;多次进行 review 不仅可以改进代码库，还可以让您花时间来确定每个问题的最佳解决方案，而不是只考虑第一个了现的在脑海中的解决方案。&lt;/p&gt;

&lt;p&gt;最后，让代码评审成为一件积极的事情。bug 在产品发布之前被发现，这可能会导致开发者的不满意。但其实这个 bug 是谁或如何引入的并不重要。唯一重要的是你和团队在创造更好的产品方面发挥了作用。&lt;/p&gt;

&lt;p&gt;培养一种积极的文化将有助于使代码 review 成为一种协作的、集体所有的活动，在这种活动中，团队会欣赏(而不是害怕)代码评审。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;1、&lt;a href=&quot;http://blog.xyecho.com/ali-code-review/&quot;&gt;阿里技术:Code Review&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 21 Nov 2022 00:12:15 +0800</pubDate>
        <link>http://localhost:4000/how-to-make-good-code-reviews-better</link>
        <guid isPermaLink="true">http://localhost:4000/how-to-make-good-code-reviews-better</guid>
        
        <category>工作经验</category>
        
        <category>团队管理</category>
        
        
        <category>总结</category>
        
      </item>
    
      <item>
        <title>阿里技术:Code Review</title>
        <description>&lt;p&gt;阿里技术微信公众号：&lt;a href=&quot;https://mp.weixin.qq.com/s/AejIOMNxsI_Ru5G0W8AeTg&quot;&gt;七个建议让 Code Review 高效又高质&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;为什么要做代码评审&quot;&gt;为什么要做代码评审&lt;/h1&gt;

&lt;p&gt;代码评审最本质的作用不是问题发现。除了代码评审，我们有更多更好的手段来发现问题。代码评审的作用更多是&lt;strong&gt;关于社会学的，是一种长期行为和组织文化&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;社会学？上了很高的层次了。&lt;/p&gt;

&lt;h2 id=&quot;1编码者视角良性的社交压力&quot;&gt;1. 编码者视角：良性的社交压力&lt;/h2&gt;

&lt;p&gt;一旦想到你的代码将会发出去给你的同事做 Review，有没有为刚才的这种想法产生一丝丝压力？这种压力是良性的，它能给你带来一种即时的反馈，阻止你去选择那些短期收益、长期损失的 “投机” 行为。如果没有代码评审这个环节，或许你就会真的 “为所欲为” 了，其实最终还是要为这种取巧行为买单。&lt;/p&gt;

&lt;h2 id=&quot;2维护者视角代码可读性的保证&quot;&gt;2. 维护者视角：代码可读性的保证&lt;/h2&gt;

&lt;p&gt;这段代码在编码完成之后，立即经历了可读性的检验。更理想地，如果组织已经有了编码规范和设计规范，还能确保这段代码遵循了这些规范。如果 CR 过程中发现这段代码没有遵循规范，那更是好事，它指向了 CR 的另外一个关键价值：知识传播。&lt;/p&gt;

&lt;h2 id=&quot;3cr带来了知识传播和设计共识&quot;&gt;3. CR 带来了知识传播和设计共识&lt;/h2&gt;

&lt;p&gt;抽象的概念如果不落到具体的事情上，就很难形成共识。有人或许知道海洋系的 “判例”，这是在法律层面形成共识的一种非常好的方法。代码评审，其实也是在形成判例：哪一类设计是合理的，哪一类设计是不合理的。通过针对具体的问题进行分析，团队就会逐渐形成设计共识，在过程中，对这些共识不那么熟悉的新同学，也可以慢慢融入。&lt;/p&gt;

&lt;h2 id=&quot;4检验逻辑正确性&quot;&gt;4. 检验逻辑正确性&lt;/h2&gt;

&lt;p&gt;1、保证代码逻辑正确，是设计者的责任。&lt;/p&gt;

&lt;p&gt;2、发现逻辑错误的其他方法。&lt;/p&gt;

&lt;p&gt;3、编写自动化单元测试。&lt;/p&gt;

&lt;p&gt;4、使用代码静态检查工具。&lt;/p&gt;

&lt;h2 id=&quot;实际操作建议&quot;&gt;实际操作建议&lt;/h2&gt;

&lt;p&gt;1、小批量——每次 Review 的代码量要少。&lt;/p&gt;

&lt;p&gt;2、多批次——Review 要频繁发生。&lt;/p&gt;

&lt;p&gt;3、找对人——合适的 Reviewer。&lt;/p&gt;

&lt;p&gt;4、快速响应。&lt;/p&gt;

&lt;p&gt;5、使用现代工具。&lt;/p&gt;

&lt;p&gt;6、考虑结对编程。&lt;/p&gt;

&lt;p&gt;7、综合在线 Review 和线下 Review。&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;参考资料：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/AejIOMNxsI_Ru5G0W8AeTg&quot;&gt;# 七个建议让 Code Review 高效又高质&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 12 Nov 2022 00:12:15 +0800</pubDate>
        <link>http://localhost:4000/ali-code-review</link>
        <guid isPermaLink="true">http://localhost:4000/ali-code-review</guid>
        
        <category>工作经验</category>
        
        <category>团队管理</category>
        
        
        <category>总结</category>
        
      </item>
    
  </channel>
</rss>
